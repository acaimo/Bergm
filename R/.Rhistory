gamma = 1)
p.flo
bergm.output(p.flo)
bergm.output <- function(x, ...) {
if (class(x) == "bergm") {
if (x$nchains > 1) {
x$AR <- mean(x$AR)
FF <- mcmc(apply(x$Theta, 2, cbind))
} else {
FF <- mcmc(x$Theta)
rates <- matrix(x$AR, 1, x$dim)
}
} else FF <- mcmc(x$Theta)
cat("\n", "Posterior Density Estimate for Model: y ~", paste(x$formula[3]), "\n", "\n")
table1 <- summary(FF)$statistics
table2 <- summary(FF)$quantiles
rownames(table1) <- paste("theta", seq(1, x$dim),
" (", x$specs[seq(1, x$dim)], ")",
sep = "")
rownames(table2) <- paste("theta", seq(1, x$dim),
" (", x$specs[seq(1, x$dim)], ")",
sep = "")
print(table1); cat("\n"); print(table2)
cat("\n", "Acceptance rate:", x$AR, "\n", "\n", "\n")
dev.new()
seqq <- 4
par(mfrow = c(min(4, x$dim), 3),
oma   = c(0, 0, 3, 0),
mar   = c(4, 3, 1.5, 1))
for (i in 1:x$dim) {
if (i %in% c(5, 9, 13)) {
dev.new()
par(mfrow = c(min(4, x$dim - (i - 1)), 3),
oma = c(0, 0, 3, 0),
mar = c(4, 3, 1.5, 1))
}
plot(density(FF[, i]),
main = "",
axes = FALSE,
xlab = bquote(paste(theta[.(i)], " (", .(x$specs[i]), ")")),
ylab = "", lwd = 2)
axis(1)
axis(2)
traceplot(FF[, i], type = "l", xlab = "Iterations", ylab = "")
autocorr.plot(FF[, i], auto.layout = FALSE, ...)
if (x$dim > 4) seqq <- seq(4, x$dim, 4)
if (i %in% union(x$dim, seqq)) title(paste("MCMC output for Model: y ~", x$formula[3]), outer = TRUE)
}
out <- list(statistics = summary(FF)$statistics,
quantiles = summary(FF)$quantiles,
theta = FF)
}
bergm.output(p.flo)
library(Bergm)
bergm.output(p.flo)
bgof <- function(x,
directed = FALSE,
sample.size = 100,
aux.iters = 10000,
n.deg = NULL,
n.dist = NULL,
n.esp = NULL,
n.ideg = NULL,
n.odeg = NULL,
...){
if (class(x) == "bergm") {
if (x$nchains > 1) x$Theta <- apply(x$Theta, 2, cbind)
F <- as.matrix(x$Theta[sample(dim(x$Theta)[1], sample.size), ])
} else if (class(x) == "calibrate.bergm"){
F <- x$Theta
}
if(directed == FALSE){ # undirected
for(i in 1:sample.size){
a <- gof.formula(x$formula,
coef = F[i, ],
verbose = FALSE,
control = control.gof.formula(nsim = 1, MCMC.burnin = aux.iters))
if(i == 1) A <- as.vector(a$pobs.deg)
A <- cbind(A, as.vector(a$psim.deg))
if(i == 1) B <- as.vector(a$pobs.dist)
B <- cbind(B,as.vector(a$psim.dist))
if(i == 1) C <- as.vector(a$pobs.espart)
C <- cbind(C,as.vector(a$psim.espart))
}
if(is.null(n.deg)) n.deg <- dim(A)[1]
if(is.null(n.dist)) n.dist <- dim(B)[1] - 1
if(is.null(n.esp)) n.esp <- dim(C)[1]
a5 <- apply(A[1:n.deg,-1],
1, quantile, probs = 0.05)
b5 <- apply(B[-(n.dist:(dim(B)[1]-1)),-1],
1, quantile, probs = 0.05)
c5 <- apply(C[1:n.esp,-1],
1, quantile, probs = 0.05)
a95 <- apply(A[1:n.deg,-1],
1, quantile, probs = 0.95)
b95 <- apply(B[-(n.dist:(dim(B)[1]-1)),-1],
1, quantile, probs = 0.95)
c95 <- apply(C[1:n.esp,-1],
1, quantile, probs = 0.95)
par(mfrow = c(1, 3),oma = c(0, 0, 3, 0), mar = c(4, 3, 1.5, 1))
boxplot(as.data.frame(t(A[1:n.deg,-1])),
xaxt = "n",
xlab = "degree",
ylab = "proportion of nodes")
axis(1, seq(1, n.deg), seq(0, n.deg - 1))
lines(A[1:n.deg, 1], lwd = 2, col = 2)
lines(a5, col = "darkgray")
lines(a95, col = "darkgray")
title("Bayesian goodness-of-fit diagnostics", outer = TRUE)
boxplot(as.data.frame(t(B[-(n.dist:(dim(B)[1] - 1)), -1])),
xaxt = "n",
xlab = "minimum geodesic distance",
ylab = "proportion of dyads")
axis(1, seq(1, n.dist), labels = c(seq(1, (n.dist-1)), "NR"))
lines(B[-(n.dist:(dim(B)[1]-1)),1],lwd=2,col=2)
lines(b5, col = "darkgray")
lines(b95, col = "darkgray")
boxplot(as.data.frame(t(C[1:n.esp,-1])),
xaxt="n",
xlab="edge-wise shared partners",
ylab="proportion of edges")
axis(1,seq(1,n.esp),seq(0,n.esp-1))
lines(C[1:n.esp,1],lwd=2,col=2)
lines(c5,col="darkgray")
lines(c95,col="darkgray")
out = list(sim.degree=A[,-1],
sim.dist=B[,-1],
sim.esp=C[,-1],
obs.degree=A[,1],
obs.dist=B[,1],
obs.esp=C[,1],
fun=F)
}else{ # directed
for(i in 1:sample.size){
a <- gof.formula(x$formula,
coef=F[i,],
verbose=FALSE,
GOF=~idegree+odegree+espartners+distance,
control=control.gof.formula(nsim=1, MCMC.burnin=aux.iters))
if(i==1) A<-as.vector(a$pobs.ideg)
A<-cbind(A,as.vector(a$psim.ideg))
if(i==1) AA<-as.vector(a$pobs.odeg)
AA<-cbind(AA,as.vector(a$psim.odeg))
if(i==1) B<-as.vector(a$pobs.dist)
B<-cbind(B,as.vector(a$psim.dist))
if(i==1) C<-as.vector(a$pobs.espart)
C<-cbind(C,as.vector(a$psim.espart))
}
if(is.null(n.ideg)) n.ideg <- dim(A)[1]
if(is.null(n.odeg)) n.odeg <- dim(AA)[1]
if(is.null(n.dist)) n.dist <- dim(B)[1]-1
if(is.null(n.esp)) n.esp <- dim(C)[1]
a5 <- apply(A[1:n.ideg,-1],1,quantile,probs=0.05)
aa5 <- apply(AA[1:n.odeg,-1],1,quantile,probs=0.05)
b5 <- apply(B[-(n.dist:(dim(B)[1]-1)),-1],1,quantile,probs=0.05)
c5 <- apply(C[1:n.esp,-1],1,quantile,probs=0.05)
a95 <- apply(A[1:n.ideg,-1],1,quantile,probs=0.95)
aa95 <- apply(AA[1:n.odeg,-1],1,quantile,probs=0.95)
b95 <- apply(B[-(n.dist:(dim(B)[1]-1)),-1],1,quantile,probs=0.95)
c95 <- apply(C[1:n.esp,-1],1,quantile,probs=0.95)
par(mfrow=c(2,2),oma=c(0,0,3,0),mar=c(4,3,1.5,1))
boxplot(as.data.frame(t(A[1:n.ideg,-1])),
xaxt="n",
xlab="in degree",
ylab="proportion of nodes")
axis(1,seq(1,n.ideg),seq(0,n.ideg-1))
lines(A[1:n.ideg,1],lwd=2,col=2)
lines(a5,col="darkgray")
lines(a95,col="darkgray")
title("Bayesian goodness-of-fit diagnostics",outer=TRUE)
boxplot(as.data.frame(t(AA[1:n.odeg,-1])),
xaxt="n",
xlab="out degree",
ylab="proportion of nodes")
axis(1,seq(1,n.odeg),seq(0,n.odeg-1))
lines(AA[1:n.odeg,1],lwd=2,col=2)
lines(aa5,col="darkgray")
lines(aa95,col="darkgray")
boxplot(as.data.frame(t(B[-(n.dist:(dim(B)[1]-1)),-1])),
xaxt="n",
xlab="minimum geodesic distance",
ylab="proportion of dyads")
axis(1,seq(1,n.dist),labels=c(seq(1,(n.dist-1)),"NR"))
lines(B[-(n.dist:(dim(B)[1]-1)),1],lwd=2,col=2)
lines(b5,col="darkgray")
lines(b95,col="darkgray")
boxplot(as.data.frame(t(C[1:n.esp,-1])),
xaxt="n",
xlab="edge-wise shared partners",
ylab="proportion of edges")
axis(1,seq(1,n.esp),seq(0,n.esp-1))
lines(C[1:n.esp,1],lwd=2,col=2)
lines(c5,col="darkgray")
lines(c95,col="darkgray")
out = list(sim.idegree=A[,-1],
sim.odegree=AA[,-1],
sim.dist=B[,-1],
sim.esp=C[,-1],
obs.degree=A[,1],
obs.dist=B[,1],
obs.esp=C[,1],
fun=F)
}
}
bgof(p.flo,
aux.iters = 500,
sample.size = 50,
n.deg = 10,
n.dist = 9,
n.esp = 6)
?gof.formula
?gof_formula
gof
bgof <- function(x,
directed = FALSE,
sample.size = 100,
aux.iters = 10000,
n.deg = NULL,
n.dist = NULL,
n.esp = NULL,
n.ideg = NULL,
n.odeg = NULL,
...){
if (class(x) == "bergm") {
if (x$nchains > 1) x$Theta <- apply(x$Theta, 2, cbind)
F <- as.matrix(x$Theta[sample(dim(x$Theta)[1], sample.size), ])
} else if (class(x) == "calibrate.bergm"){
F <- x$Theta
}
if(directed == FALSE){ # undirected
for(i in 1:sample.size){
a <- gof(x$formula,
coef = F[i, ],
verbose = FALSE,
control = control.gof.formula(nsim = 1, MCMC.burnin = aux.iters))
if(i == 1) A <- as.vector(a$pobs.deg)
A <- cbind(A, as.vector(a$psim.deg))
if(i == 1) B <- as.vector(a$pobs.dist)
B <- cbind(B,as.vector(a$psim.dist))
if(i == 1) C <- as.vector(a$pobs.espart)
C <- cbind(C,as.vector(a$psim.espart))
}
if(is.null(n.deg)) n.deg <- dim(A)[1]
if(is.null(n.dist)) n.dist <- dim(B)[1] - 1
if(is.null(n.esp)) n.esp <- dim(C)[1]
a5 <- apply(A[1:n.deg,-1],
1, quantile, probs = 0.05)
b5 <- apply(B[-(n.dist:(dim(B)[1]-1)),-1],
1, quantile, probs = 0.05)
c5 <- apply(C[1:n.esp,-1],
1, quantile, probs = 0.05)
a95 <- apply(A[1:n.deg,-1],
1, quantile, probs = 0.95)
b95 <- apply(B[-(n.dist:(dim(B)[1]-1)),-1],
1, quantile, probs = 0.95)
c95 <- apply(C[1:n.esp,-1],
1, quantile, probs = 0.95)
par(mfrow = c(1, 3),oma = c(0, 0, 3, 0), mar = c(4, 3, 1.5, 1))
boxplot(as.data.frame(t(A[1:n.deg,-1])),
xaxt = "n",
xlab = "degree",
ylab = "proportion of nodes")
axis(1, seq(1, n.deg), seq(0, n.deg - 1))
lines(A[1:n.deg, 1], lwd = 2, col = 2)
lines(a5, col = "darkgray")
lines(a95, col = "darkgray")
title("Bayesian goodness-of-fit diagnostics", outer = TRUE)
boxplot(as.data.frame(t(B[-(n.dist:(dim(B)[1] - 1)), -1])),
xaxt = "n",
xlab = "minimum geodesic distance",
ylab = "proportion of dyads")
axis(1, seq(1, n.dist), labels = c(seq(1, (n.dist-1)), "NR"))
lines(B[-(n.dist:(dim(B)[1]-1)),1],lwd=2,col=2)
lines(b5, col = "darkgray")
lines(b95, col = "darkgray")
boxplot(as.data.frame(t(C[1:n.esp,-1])),
xaxt="n",
xlab="edge-wise shared partners",
ylab="proportion of edges")
axis(1,seq(1,n.esp),seq(0,n.esp-1))
lines(C[1:n.esp,1],lwd=2,col=2)
lines(c5,col="darkgray")
lines(c95,col="darkgray")
out = list(sim.degree=A[,-1],
sim.dist=B[,-1],
sim.esp=C[,-1],
obs.degree=A[,1],
obs.dist=B[,1],
obs.esp=C[,1],
fun=F)
}else{ # directed
for(i in 1:sample.size){
a <- gof.formula(x$formula,
coef=F[i,],
verbose=FALSE,
GOF=~idegree+odegree+espartners+distance,
control=control.gof.formula(nsim=1, MCMC.burnin=aux.iters))
if(i==1) A<-as.vector(a$pobs.ideg)
A<-cbind(A,as.vector(a$psim.ideg))
if(i==1) AA<-as.vector(a$pobs.odeg)
AA<-cbind(AA,as.vector(a$psim.odeg))
if(i==1) B<-as.vector(a$pobs.dist)
B<-cbind(B,as.vector(a$psim.dist))
if(i==1) C<-as.vector(a$pobs.espart)
C<-cbind(C,as.vector(a$psim.espart))
}
if(is.null(n.ideg)) n.ideg <- dim(A)[1]
if(is.null(n.odeg)) n.odeg <- dim(AA)[1]
if(is.null(n.dist)) n.dist <- dim(B)[1]-1
if(is.null(n.esp)) n.esp <- dim(C)[1]
a5 <- apply(A[1:n.ideg,-1],1,quantile,probs=0.05)
aa5 <- apply(AA[1:n.odeg,-1],1,quantile,probs=0.05)
b5 <- apply(B[-(n.dist:(dim(B)[1]-1)),-1],1,quantile,probs=0.05)
c5 <- apply(C[1:n.esp,-1],1,quantile,probs=0.05)
a95 <- apply(A[1:n.ideg,-1],1,quantile,probs=0.95)
aa95 <- apply(AA[1:n.odeg,-1],1,quantile,probs=0.95)
b95 <- apply(B[-(n.dist:(dim(B)[1]-1)),-1],1,quantile,probs=0.95)
c95 <- apply(C[1:n.esp,-1],1,quantile,probs=0.95)
par(mfrow=c(2,2),oma=c(0,0,3,0),mar=c(4,3,1.5,1))
boxplot(as.data.frame(t(A[1:n.ideg,-1])),
xaxt="n",
xlab="in degree",
ylab="proportion of nodes")
axis(1,seq(1,n.ideg),seq(0,n.ideg-1))
lines(A[1:n.ideg,1],lwd=2,col=2)
lines(a5,col="darkgray")
lines(a95,col="darkgray")
title("Bayesian goodness-of-fit diagnostics",outer=TRUE)
boxplot(as.data.frame(t(AA[1:n.odeg,-1])),
xaxt="n",
xlab="out degree",
ylab="proportion of nodes")
axis(1,seq(1,n.odeg),seq(0,n.odeg-1))
lines(AA[1:n.odeg,1],lwd=2,col=2)
lines(aa5,col="darkgray")
lines(aa95,col="darkgray")
boxplot(as.data.frame(t(B[-(n.dist:(dim(B)[1]-1)),-1])),
xaxt="n",
xlab="minimum geodesic distance",
ylab="proportion of dyads")
axis(1,seq(1,n.dist),labels=c(seq(1,(n.dist-1)),"NR"))
lines(B[-(n.dist:(dim(B)[1]-1)),1],lwd=2,col=2)
lines(b5,col="darkgray")
lines(b95,col="darkgray")
boxplot(as.data.frame(t(C[1:n.esp,-1])),
xaxt="n",
xlab="edge-wise shared partners",
ylab="proportion of edges")
axis(1,seq(1,n.esp),seq(0,n.esp-1))
lines(C[1:n.esp,1],lwd=2,col=2)
lines(c5,col="darkgray")
lines(c95,col="darkgray")
out = list(sim.idegree=A[,-1],
sim.odegree=AA[,-1],
sim.dist=B[,-1],
sim.esp=C[,-1],
obs.degree=A[,1],
obs.dist=B[,1],
obs.esp=C[,1],
fun=F)
}
}
bgof(p.flo,
aux.iters = 500,
sample.size = 50,
n.deg = 10,
n.dist = 9,
n.esp = 6)
library(MCMCpack)
bergm.output <- function(x, ...) {
if (class(x) == "bergm") {
if (x$nchains > 1) {
x$AR <- mean(x$AR)
FF <- mcmc(apply(x$Theta, 2, cbind))
} else {
FF <- mcmc(x$Theta)
rates <- matrix(x$AR, 1, x$dim)
}
} else FF <- mcmc(x$Theta)
cat("\n", "Posterior Density Estimate for Model: y ~", paste(x$formula[3]), "\n", "\n")
table1 <- summary(FF)$statistics
table2 <- summary(FF)$quantiles
rownames(table1) <- paste("theta", seq(1, x$dim),
" (", x$specs[seq(1, x$dim)], ")",
sep = "")
rownames(table2) <- paste("theta", seq(1, x$dim),
" (", x$specs[seq(1, x$dim)], ")",
sep = "")
print(table1); cat("\n"); print(table2)
cat("\n", "Acceptance rate:", x$AR, "\n", "\n", "\n")
dev.new()
seqq <- 4
par(mfrow = c(min(4, x$dim), 3),
oma   = c(0, 0, 3, 0),
mar   = c(4, 3, 1.5, 1))
for (i in 1:x$dim) {
if (i %in% c(5, 9, 13)) {
dev.new()
par(mfrow = c(min(4, x$dim - (i - 1)), 3),
oma = c(0, 0, 3, 0),
mar = c(4, 3, 1.5, 1))
}
plot(density(FF[, i]),
main = "",
axes = FALSE,
xlab = bquote(paste(theta[.(i)], " (", .(x$specs[i]), ")")),
ylab = "", lwd = 2)
axis(1)
axis(2)
traceplot(FF[, i], type = "l", xlab = "Iterations", ylab = "")
autocorr.plot(FF[, i], auto.layout = FALSE, ...)
if (x$dim > 4) seqq <- seq(4, x$dim, 4)
if (i %in% union(x$dim, seqq)) title(paste("MCMC output for Model: y ~",
x$formula[3]),
outer = TRUE)
}
out <- list(statistics = summary(FF)$statistics,
quantiles = summary(FF)$quantiles,
theta = FF)
}
20**2
bergm.output(p.flo)
?ergmMPLE
?sweep
A <- matrix(c(1,2,3,4,5,6),2,3)
A
A + c(1,2,3)
A - c(1,2,3)
A <- matrix(c(1,2,3,4,5,6),2,3)
A - c(1,2,3)
?simulate
?simulate
?simulate.ergm
data(florentine)
#
# fit an edges and 2-star model using the ergm function
#
gest <- ergm(flomarriage ~ edges + kstar(2))
summary(gest)
g.sim <- simulate(gest, nsim=10,
monitor=~triangles, statsonly=TRUE,
control=control.simulate.ergm(MCMC.burnin=1000, MCMC.interval=100))
g.sim
g.sim - c(1,1,1)
sy <- c(1,1,1)
g.sim - sy
sweep(g.sim, sy, `-`)
g.sim
sy
sweep(g.sim, 2, sy, `-`)
g.sim - sy == sweep(g.sim, 2, sy, `-`)
?optim
?fn
?gr
optim
?optimize
optim
optim:::fn()
optim:::fn
?capture.output
#library(devtools)
#install_github("statnet/statnet.common")
#install_github("statnet/network")
#install_github("statnet/ergm")
library(ergm)
?simulate.ergm
simulate.ergm
simulate
simulate.ergm
ergm:::simulate.ergm
ergm:::simulate.formula
library(statnet)
library(ndtv)
data(toy_epi_sim)
y <- toy_epi_sim
render.d3movie(y,
displaylabels = FALSE,
bg = 'black',
edge.col = 'yellow',
show.time = FALSE,
mode = "kamadakawai",
vertex.col = 'ndtvcol',
vertex.tooltip = function(slice){paste('ID:',slice%v%'vertex.names','<br>',
'Status:', slice%v%'testatus')})
library(ergm)
?ergm.mcmcslave
?edgecov
y1 <- network(10)
y2 <- network(10)
summary(y1 ~ edgecov(y2[,]))
y1
y2 <- network(100)
y1 <- network(100)
y1
summary(y1 ~ edgecov(y2[,]))
summary(y1 ~ edgecov(x = y2[,]))
?network
y1 <- network(matrix(1,5,5), directed = FALSE)
plot(y1)
y2 <- network(5, directed = FALSE)
plot(y2)
summary(y1 ~ edgecov(x = y2[,]))
summary(y1 ~ edgecov(x = y2))
?edgecov
library(ergm)
?ergm_model
library(ergm)
?ergm_model
?model
install.packages("ergm")
install.packages("ergm")
install.packages("ergm")
